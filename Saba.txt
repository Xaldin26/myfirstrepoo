import I2C_LCD_driver
import RPi.GPIO as GPIO
from time import sleep
import adafruit_fingerprint
import serial
import requests
import datetime
import threading
import atexit

# Initialize serial connection for Adafruit Fingerprint Sensor
def initialize_fingerprint_sensor():
    try:
        uart = serial.Serial('/dev/ttyUSB0', baudrate=57600, timeout=1)
        fingerprint_sensor = adafruit_fingerprint.Adafruit_Fingerprint(uart)
        if fingerprint_sensor is None:
            raise ValueError('Failed to initialize fingerprint sensor!')
        print('Fingerprint sensor initialized successfully.')
        return fingerprint_sensor
    except Exception as e:
        print('Failed to initialize fingerprint sensor:', e)
        exit(1)

fingerprint_sensor = initialize_fingerprint_sensor()

# Initialize LCD
lcd = I2C_LCD_driver.lcd()

# Setup GPIO pins
C1, C2, C3, C4 = 10, 9, 11, 0
R1, R2, R3, R4 = 25, 8, 7, 1
buzzer, Relay = 17, 27
m5_button_pin = 24

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(buzzer, GPIO.OUT)
GPIO.setup(Relay, GPIO.OUT)
GPIO.output(Relay, GPIO.HIGH)

GPIO.setup(C1, GPIO.OUT)
GPIO.setup(C2, GPIO.OUT)
GPIO.setup(C3, GPIO.OUT)
GPIO.setup(C4, GPIO.OUT)

GPIO.setup(R1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(m5_button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # M5 button with pull-up resistor

# Global variables
input_pin = ""
consecutive_wrong_attempts = 0
manual_control = False

def cleanup():
    """Ensure GPIO cleanup on exit."""
    GPIO.cleanup()
    print("GPIO cleaned up")

atexit.register(cleanup)

# Thread for lock status API check
def check_lock_status():
    """Fetch lock status from the API and control the relay accordingly."""
    api_url_lock_status = 'https://lockup.pro/api/logs'
    global manual_control

    while True:
        if not manual_control:
            try:
                response = requests.get(api_url_lock_status, timeout=5)
                response.raise_for_status()
                data = response.json()
                status = data.get('status')

                if status == 'unlocked':
                    print('Unlocking system via API')
                    GPIO.output(Relay, GPIO.LOW)  # Unlock the system
                elif status == 'locked':
                    print('Locking system via API')
                    GPIO.output(Relay, GPIO.HIGH)  # Lock the system

            except requests.RequestException as e:
                print('Failed to fetch lock status:', e)

        sleep(5)  # Check every 5 seconds

# Start the lock status check in a separate thread
lock_status_thread = threading.Thread(target=check_lock_status)
lock_status_thread.daemon = True  # Ensure thread closes when main program exits
lock_status_thread.start()

# Function to fetch data from API
def fetch_api_data(api_url):
    try:
        response = requests.get(api_url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return data
    except requests.RequestException as e:
        print(f'Failed to fetch data from API: {e}')
        return None

def fetch_temperature():
    """Fetch the latest temperature data from the API and trigger alarm if necessary."""
    api_url_temp = 'https://lockup.pro/api/temperatures'
    data = fetch_api_data(api_url_temp)
    if data:
        latest_record = data[-1]
        temperature = float(latest_record.get('temperature', 0))
        humidity = float(latest_record.get('humidity', 0))
        print(f"Fetched temperature: {temperature}°C, Humidity: {humidity}%")

        if temperature >= 40:
            print("Temperature >= 40°C. Triggering buzzer alarm!")
            trigger_alarm()
        return temperature, humidity
    return None, None

def unlock_for_15_minutes():
    """Unlock the system for 15 minutes, then relock."""
    print("Unlocking system for 15 minutes...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Unlocked", 1)
    GPIO.output(Relay, GPIO.LOW)  # Unlock the system
    GPIO.output(buzzer, GPIO.HIGH)
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)

    sleep(900)  # 15 minutes

    print("Relocking system after 15 minutes...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Locked", 1)
    GPIO.output(Relay, GPIO.HIGH)  # Lock the system
    GPIO.output(buzzer, GPIO.HIGH)
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)

def check_m5_button_press():
    """Check if the M5 button is pressed and handle unlocking for 15 minutes."""
    global manual_control
    if GPIO.input(m5_button_pin) == GPIO.LOW:
        print("M5 Button Pressed!")
        manual_control = True
        unlock_for_15_minutes()
        manual_control = False

def verify_fingerprint_and_pin(pin_input, admin=False):
    """Common verification logic for both admin and regular user."""
    api_url = f'https://lockup.pro/api/admin/pin/{pin_input}' if admin else f'https://lockup.pro/api/instructors/{pin_input}'
    data = fetch_api_data(api_url)

    if data is None:
        lcd.lcd_clear()
        lcd.lcd_display_string("PIN not found", 1)
        return False

    matched_finger_id = get_fingerprint()
    if matched_finger_id is None:
        lcd.lcd_clear()
        lcd.lcd_display_string("Fingerprint Failed", 1)
        return False

    stored_finger_id = data.get('finger_id')
    if matched_finger_id != stored_finger_id:
        lcd.lcd_clear()
        lcd.lcd_display_string("Access Denied", 1)
        return False

    lcd.lcd_clear()
    lcd.lcd_display_string("Access Granted", 1)
    GPIO.output(Relay, GPIO.LOW)
    return True

def main_loop():
    """Main loop to handle keypad and other inputs."""
    global input_pin

    try:
        while True:
            temperature, humidity = fetch_temperature()
            lcd.lcd_display_string("Enter Your PIN:", 1)

            # Check if M5 button is pressed
            check_m5_button_press()

            setAllColumns(GPIO.LOW)
            readLine(C1, ["D", "C", "B", "A"])
            readLine(C2, ["#", "9", "6", "3"])
            readLine(C3, ["0", "8", "5", "2"])
            readLine(C4, ["*", "7", "4", "1"])
            sleep(0.1)

            lcd.lcd_display_string(f"PIN: {input_pin}", 2)

            if len(input_pin) >= 4:
                print("Input PIN:", input_pin)

                # Verify admin first
                if verify_fingerprint_and_pin(input_pin, admin=True):
                    print("Admin Access granted.")
                else:
                    # Regular user verification
                    if verify_fingerprint_and_pin(input_pin):
                        print("Access granted.")
                    else:
                        print("Access denied.")

                input_pin = ""  # Reset input_pin after checking
                lcd.lcd_clear()
                sleep(0.1)

    except KeyboardInterrupt:
        print("Terminated by user")

# Main entry point
if __name__ == "__main__":
    main_loop()
