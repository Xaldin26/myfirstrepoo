import I2C_LCD_driver
import RPi.GPIO as GPIO
from time import sleep
import adafruit_fingerprint
import serial
import requests
import datetime
import threading

# Initialize serial connection for Adafruit Fingerprint Sensor
try:
    uart = serial.Serial('/dev/ttyUSB0', baudrate=57600, timeout=1)
    fingerprint_sensor = adafruit_fingerprint.Adafruit_Fingerprint(uart)
    if fingerprint_sensor is None:
        raise ValueError('Failed to initialize fingerprint sensor!')
    print('Fingerprint sensor initialized successfully.')
except Exception as e:
    print('Failed to initialize fingerprint sensor:', e)
    exit(1)

# Initialize LCD
lcd = I2C_LCD_driver.lcd()

# Setup GPIO pins
C1, C2, C3, C4 = 10, 9, 11, 0
R1, R2, R3, R4 = 25, 8, 7, 1
buzzer, Relay = 17, 27
m5_button_pin = 24 

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(buzzer, GPIO.OUT)
GPIO.setup(Relay, GPIO.OUT)
GPIO.output(Relay, GPIO.HIGH)

GPIO.setup(C1, GPIO.OUT)
GPIO.setup(C2, GPIO.OUT)
GPIO.setup(C3, GPIO.OUT)
GPIO.setup(C4, GPIO.OUT)

GPIO.setup(R1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(m5_button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # M5 button with pull-up resistor

keypadPressed = -1
input_pin = ""
failed_attempts = 0
consecutive_wrong_attempts = 0  # Initialize counter for wrong attempts
alarm_triggered = False
manual_control = False

# Function to unlock the system for 15 minutes
def unlock_for_15_minutes():
    """Unlock the system for 15 minutes, then relock."""
    print("Unlocking system for 15 minutes...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Unlocked", 1, 0)
    GPIO.output(Relay, GPIO.LOW)  # Unlock the system
    GPIO.output(buzzer, GPIO.HIGH)  # Sound buzzer briefly
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)
    
    # Wait for 15 minutes (900 seconds)
    sleep(900)
    
    # Lock the system again
    print("15 minutes passed, locking system...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Locked", 1, 0)
    GPIO.output(Relay, GPIO.HIGH)  # Lock the system
    GPIO.output(buzzer, GPIO.HIGH)
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)

# Check if the M5 button is pressed
def check_m5_button_press():
    """Check if the M5 button is pressed and handle unlocking for 15 minutes."""
    global manual_control
    if GPIO.input(m5_button_pin) == GPIO.LOW:  # Button press will register as LOW
        print("M5 Button Pressed!")
        manual_control = True
        unlock_for_15_minutes()  # Unlock the system for 15 minutes
        manual_control = False  # Reset manual control after 15 minutes

# Optimized readLine function
def readLine(line, characters):
    global input_pin
    GPIO.output(line, GPIO.HIGH)
    if GPIO.input(R1) == 1:
        input_pin += characters[0]
    elif GPIO.input(R2) == 1:
        input_pin += characters[1]
    elif GPIO.input(R3) == 1:
        input_pin += characters[2]
    elif GPIO.input(R4) == 1:
        input_pin += characters[3]
    GPIO.output(line, GPIO.LOW)

# Function to set all column pins
def setAllColumns(state):
    GPIO.output(C1, state)
    GPIO.output(C2, state)
    GPIO.output(C3, state)
    GPIO.output(C4, state)

# Add GPIO interrupts for row detection
GPIO.add_event_detect(R1, GPIO.RISING, callback=lambda x: readLine(C1, ["D", "#", "0", "*"]), bouncetime=50)
GPIO.add_event_detect(R2, GPIO.RISING, callback=lambda x: readLine(C2, ["C", "9", "8", "7"]), bouncetime=50)
GPIO.add_event_detect(R3, GPIO.RISING, callback=lambda x: readLine(C3, ["B", "6", "5", "4"]), bouncetime=50)
GPIO.add_event_detect(R4, GPIO.RISING, callback=lambda x: readLine(C4, ["A", "3", "2", "1"]), bouncetime=50)

# Main loop
print("Starting main loop")
try:
    while True:
        lcd.lcd_display_string("Enter Your PIN:", 1, 0)
        check_m5_button_press()  # Check if the M5 button is pressed

        # No need to call readLine directly; it's handled by interrupts

        # Display the entered PIN
        lcd.lcd_display_string(f"PIN: {input_pin.ljust(4, '*')}", 2, 0)

        # Limit input PIN to 4 digits
        if len(input_pin) >= 4:
            print("Input PIN:", input_pin)

            # First check if the PIN belongs to an admin
            if verify_admin_fingerprint_and_pin(input_pin):
                print("Admin Access granted.")
            else:
                # If not an admin, proceed with regular verification
                if verify_fingerprint_and_pin(input_pin):
                    print("Access granted.")
                else:
                    print("Access denied.")

            input_pin = ""  # Reset input PIN after checking
            lcd.lcd_clear()  # Clear LCD after checking

except KeyboardInterrupt:
    print("Terminated by user")
finally:
    GPIO.cleanup()
    print("Cleaned up GPIO pins")
