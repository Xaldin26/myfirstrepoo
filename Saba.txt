import I2C_LCD_driver
import RPi.GPIO as GPIO
from time import sleep, time
import adafruit_fingerprint
import serial
import requests
import datetime
import threading

# Initialize serial connection for Adafruit Fingerprint Sensor
try:
    uart = serial.Serial('/dev/ttyUSB0', baudrate=57600, timeout=1)
    fingerprint_sensor = adafruit_fingerprint.Adafruit_Fingerprint(uart)
    if fingerprint_sensor is None:
        raise ValueError('Failed to initialize fingerprint sensor!')
    print('Fingerprint sensor initialized successfully.')
except Exception as e:
    print('Failed to initialize fingerprint sensor:', e)
    exit(1)

# Initialize LCD
lcd = I2C_LCD_driver.lcd()

# Setup GPIO pins
C1, C2, C3, C4 = 10, 9, 11, 0
R1, R2, R3, R4 = 25, 8, 7, 1
buzzer, Relay = 17, 27
m5_button_pin = 24

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(buzzer, GPIO.OUT)
GPIO.setup(Relay, GPIO.OUT)
GPIO.output(Relay, GPIO.HIGH)

GPIO.setup(C1, GPIO.OUT)
GPIO.setup(C2, GPIO.OUT)
GPIO.setup(C3, GPIO.OUT)
GPIO.setup(C4, GPIO.OUT)

GPIO.setup(R1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(R4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(m5_button_pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # M5 button with pull-up resistor

keypadPressed = -1
input_pin = ""
failed_attempts = 0
consecutive_wrong_attempts = 0  # Initialize counter for wrong attempts
alarm_triggered = False
manual_control = False

# Debounce configuration for keypad
debounce_time = 0.3  # 300ms debounce time
last_keypress_time = time()

manual_control = False  # New flag to track manual control state

def unlock_for_15_minutes():
    """Unlock the system for 15 minutes, then relock."""
    print("Unlocking system for 15 minutes...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Unlocked", 1, 0)
    GPIO.output(Relay, GPIO.LOW)  # Unlock the system
    GPIO.output(buzzer, GPIO.HIGH)  # Sound buzzer briefly
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)

    # Wait for 15 minutes (900 seconds)
    sleep(900)

    # Lock the system again
    print("15 minutes passed, locking system...")
    lcd.lcd_clear()
    lcd.lcd_display_string("System Locked", 1, 0)
    GPIO.output(Relay, GPIO.HIGH)  # Lock the system
    GPIO.output(buzzer, GPIO.HIGH)
    sleep(0.3)
    GPIO.output(buzzer, GPIO.LOW)

def fetch_temperature():
    """Fetch the latest temperature data from the API."""
    api_url_temp = 'https://lockup.pro/api/temperatures'
    try:
        response = requests.get(api_url_temp, timeout=3)  # Set a timeout to avoid long waits
        response.raise_for_status()
        data = response.json()
        
        if not data:
            print("No temperature data received.")
            return None, None
        
        latest_record = data[-1]  # Get the last record in the list (most recent)
        temperature = float(latest_record.get('temperature'))
        humidity = float(latest_record.get('humidity'))
        print(f"Fetched temperature: {temperature}°C, Humidity: {humidity}%")
        
        if temperature >= 40:
            print("Temperature is >= 40°C. Triggering buzzer alarm!")
            trigger_alarm()
        
        return temperature, humidity
    except Exception as e:
        print('Failed to fetch temperature data:', e)
        return None, None

# Run API requests in a separate thread to avoid blocking the main loop
def fetch_api_data(pin_input):
    """Fetch instructor data from API using the provided PIN."""
    api_url_instructor = f'https://lockup.pro/api/instructors/{pin_input}'
    try:
        response = requests.get(api_url_instructor, timeout=3)  # Set a timeout
        response.raise_for_status()
        data = response.json()
        print('Fetched data from API:', data)
        return data
    except Exception as e:
        print('Failed to fetch API data:', e)
        return []

def get_fingerprint():
    """Get a fingerprint image, template it, and see if it matches!"""
    print("Waiting for image...")
    while fingerprint_sensor.get_image() != adafruit_fingerprint.OK:
        sleep(0.1)
    print("Image detected. Templating...")
    if fingerprint_sensor.image_2_tz(1) != adafruit_fingerprint.OK:
        return None
    print("Searching...")
    result = fingerprint_sensor.finger_fast_search()
    if result == adafruit_fingerprint.OK:
        matched_id = fingerprint_sensor.finger_id
        print(f"Found fingerprint with ID {matched_id}!")
        return matched_id
    else:
        print("No match found")
        return None

def verify_admin_fingerprint_and_pin(pin_input):
    """Verify admin PIN and fingerprint."""
    try:
        admin = fetch_api_data(pin_input)
        if not admin:
            lcd.lcd_clear()
            sleep(2)
            consecutive_wrong_attempts += 1
            if consecutive_wrong_attempts >= 4:
                trigger_alarm()
                consecutive_wrong_attempts = 0
            return False
        
        lcd.lcd_clear()
        lcd.lcd_display_string("Admin Place Finger", 1, 0)
        sleep(1)

        while fingerprint_sensor.get_image() != adafruit_fingerprint.OK:
            sleep(0.1)

        matched_finger_id = get_fingerprint()
        if matched_finger_id is None:
            lcd.lcd_clear()
            lcd.lcd_display_string("Scan Failed", 1, 0)
            sleep(2)
            return False

        stored_finger_id = admin.get('finger_id')
        if stored_finger_id is None or matched_finger_id != stored_finger_id:
            lcd.lcd_clear()
            lcd.lcd_display_string("Admin Access Denied", 1, 0)
            sleep(2)
            return False
        
        lcd.lcd_clear()
        lcd.lcd_display_string("Admin Access", 1, 0)
        GPIO.output(buzzer, GPIO.HIGH)
        sleep(0.3)
        GPIO.output(buzzer, GPIO.LOW)
        GPIO.output(Relay, GPIO.LOW)  # Unlock the system
        manual_control = True
        return True

    except Exception as e:
        print('Error:', e)
        return False

def debounce_keypress():
    """Debounce the keypad input to avoid multiple key registrations."""
    global last_keypress_time
    if time() - last_keypress_time > debounce_time:
        last_keypress_time = time()
        return True
    return False

def setAllColumns(state):
    GPIO.output(C1, state)
    GPIO.output(C2, state)
    GPIO.output(C3, state)
    GPIO.output(C4, state)

def readLine(line, characters):
    global input_pin
    GPIO.output(line, GPIO.HIGH)
    if GPIO.input(R1) == 1 and debounce_keypress():
        input_pin += characters[0]
    if GPIO.input(R2) == 1 and debounce_keypress():
        input_pin += characters[1]
    if GPIO.input(R3) == 1 and debounce_keypress():
        input_pin += characters[2]
    if GPIO.input(R4) == 1 and debounce_keypress():
        input_pin += characters[3]
    GPIO.output(line, GPIO.LOW)

# Main loop
print("Starting main loop")
try:
    while True:
        # Check if the M5 button is pressed
        if GPIO.input(m5_button_pin) == GPIO.LOW:
            unlock_for_15_minutes()

        # Fetch temperature data in a separate thread to avoid blocking
        temperature_thread = threading.Thread(target=fetch_temperature)
        temperature_thread.start()

        # Wait for keypad input
        lcd.lcd_display_string("Enter Your PIN:", 1, 0)
        setAllColumns(GPIO.LOW)
        readLine(C1, ["D", "C", "B", "A"])  # Assign D button for clearing input
        readLine(C2, ["#", "9", "6", "3"])
        readLine(C3, ["0", "8", "5", "2"])
        readLine(C4, ["*", "7", "4", "1"])
        sleep(0.1)

        # Update the LCD with the input PIN
        lcd.lcd_display_string(f"PIN: {input_pin.ljust(4, '*')}", 2, 0)

        # Limit input PIN to 4 digits
        if len(input_pin) >= 4:
            print("Input PIN:", input_pin)

            # First check if the PIN belongs to an admin
            if verify_admin_fingerprint_and_pin(input_pin):
                print("Admin Access granted.")
            else:
                # If not an admin, proceed with regular verification
                instructors = fetch_api_data(input_pin)
                if not instructors:
                    lcd.lcd_clear()
                    lcd.lcd_display_string("Access Denied", 1, 0)
                    print("Access denied.")
                else:
                    print("Access granted.")

            input_pin = ""  # Reset input PIN after checking
            lcd.lcd_clear()  # Clear LCD after checking
            sleep(1)

except KeyboardInterrupt:
    print("Terminated by user")
finally:
    GPIO.cleanup()
    print("Cleaned up GPIO pins")
